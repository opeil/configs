
priority 2

#
# Utility functions
#
global !p
def insert_args(t, fun=False):
    """
    Generates tabstops for type specifications of subroutine arguments
    """
    result = ""
    args = t.current_text
    argList = args.split(",")

    n0 = 3

    # Additional line with a return value type for a function
    if fun:
        res_name = snip.tabstops[3].current_text
        if res_name:
            retval_name = res_name
        else:
            retval_name = snip.tabstops[1].current_text

        result += "${%d:type} :: "%(n0) + retval_name + "\n"
        n0 += 1

    for i, arg in enumerate(argList):
        n = 2 * i + n0
        decl  = "!> ${%d:arg description}\n"%(n)
        decl += "${%d:argtype} :: "%(n + 1) + arg.strip() + "\n"
        result += decl

    snip.expand_anon(result)

def match_double_colon(snip):
    """
    Returns True if there is a double colon "::" to the right from the cursor
    """
    return re.match('\s*::', snip.buffer[snip.line][snip.column + 1:])

def get_type(symb):
    """
    Expands letter codes for types.
    """
    return {'i': "integer",
            'r': "real(kind=dp)",
            'z': "complex(kind=dp)",
            'l': "logical",
            'h': "character",
            's': "character(len=*)",
            't': "type",
            'c': "class"}.get(symb, "unknown")

def get_var_attr(symb):
    """
    Expands letter codes for variable attributes.
    """
    return {'a': "allocatable",
            'p': "pointer",
            'c': "parameter"}.get(symb, "")

# Does not work as expected
def remove_trailing_spaces(snip):
    for i in range(snip.snippet_start[0], snip.snippet_end[0]):
        if not snip.buffer[i].strip():
            snip.buffer[i] = ""


endglobal


snippet prog "program"
program ${1:name}
	implicit none
	${2}
end program $1
endsnippet

snippet impl "implicit none"
implicit none
$0
endsnippet

snippet if "if"
if (${1:condition}) then
	${2}
end if
endsnippet

snippet sel "select case"
select case(${1:condition})
	case(${2})
		${3}
	case default
end select
endsnippet

snippet selt "select type"
select type(${1:condition})
	type is(${2})
		${3}
	class default
end select
endsnippet

snippet do "do"
do ${1:i} = ${2:1}, ${3:N}
	${4}
end do
endsnippet

snippet dow "dow"
do while (${1:condition})
	${2}
end do
endsnippet

snippet type "type"
type${1/(.*)/(?1:, )/}${1:attributes} :: ${2:name}
	${0}
contains
end type $2
endsnippet

snippet open "open"
open (unit=${1:10}, file=${2:filename}, ${3})
${4}
endsnippet

#
# Subroutine and function definitions.
# Generate a list of argument declarations
#
post_jump "if snip.tabstop == 0: insert_args(snip.tabstops[2])"
snippet sub "sub" m
subroutine ${1:name}(${2})
   $0
end subroutine $1
endsnippet

post_jump "if snip.tabstop == 0: insert_args(snip.tabstops[2], fun=True)"
snippet fun "function"
function ${1:name}(${2})${3/(.*)/(?1: result\()/}${3:ret_val}${3/(.*)/(?1:\))/}
	$0
end function $1
endsnippet


snippet arr "arr"
${1:type}, allocatable :: ${2}
endsnippet

snippet const "const"
${1:type}, parameter :: ${3} = ${4}
endsnippet

#
# Procedure dummy arguments
#
# The context-dependent snippets (that are prioritized by default) are for the cases when
# one already have a variable prepended by "::".
#
# Simple types
post_jump "if snip.tabstop == 0: snip.cursor.set(snip.line, snip.column + 5)"
snippet "([irzlhs])arg" "simple type argument before ::" "match_double_colon(snip)" re
`!p
if match is not None:
   snip.rv = get_type(match.group(1))
else:
   snip.rv = "unknown"`, intent(${1:in})${2/(.*)/(?1:, )/}${2:attributes}$0
endsnippet

snippet "([irzlhs])arg" "simple type argument" r
`!p
if match is not None:
   snip.rv = get_type(match.group(1))
else:
   snip.rv = "unknown"`, intent(${1:in})${2/(.*)/(?1:, )/}${2:attributes} :: ${3}
endsnippet

# Derived types (require extra tabstop for the type name)
post_jump "if snip.tabstop == 0: snip.cursor.set(snip.line, snip.column + 5)"
snippet "([tc])arg" "derived type argument before ::" "match_double_colon(snip)" re
`!p
if match is not None:
   snip.rv = get_type(match.group(1))
else:
   snip.rv = "unknown"`($1), intent(${2:in})${3/(.*)/(?1:, )/}${3:attributes}$0
endsnippet

snippet "([tc])arg" "derived type argument" r
`!p
if match is not None:
   snip.rv = get_type(match.group(1))
else:
   snip.rv = "unknown"`($1), intent(${2:in})${3/(.*)/(?1:, )/}${3:attributes} :: ${4}
endsnippet

#
# Variable definitions
#
# Simple types
post_jump "if snip.tabstop == 0: snip.cursor.set(snip.line, snip.column + 5)"
snippet "([irzlhs])v([apc]?)" "simple type variable before ::" "match_double_colon(snip)" re
`!p
attr = get_var_attr(match.group(2))
if attr:
   attr = ", " + attr

snip.rv = get_type(match.group(1)) + attr
`$0
endsnippet

snippet "([irzlhs])v([apc]?)" "simple type variable" r
`!p
attr = get_var_attr(match.group(2))
if attr:
   attr = ", " + attr

snip.rv = get_type(match.group(1)) + attr
` :: ${2}
endsnippet

# Derived types
post_jump "if snip.tabstop == 0: snip.cursor.set(snip.line, snip.column + 5)"
snippet "([tc])v([apc]?)" "derived type variable before ::" "match_double_colon(snip)" re
`!p
snip.rv = get_type(match.group(1))
`($1)`!p
attr = get_var_attr(match.group(2))
if attr:
   snip.rv = ", " + attr
`$0
endsnippet

snippet "([tc])v([apc]?)" "derived type argument" r
`!p
snip.rv = get_type(match.group(1))
`($1)`!p
attr = get_var_attr(match.group(2))
if attr:
   snip.rv = ", " + attr
` :: ${2}
endsnippet


# custom snippets
snippet print "print"
print ${1:*}, ${2}
endsnippet

snippet dump "dump var"
print ${1:*}, "${2} = ", $2
endsnippet

snippet read "read"
read(${1:*},${2:*}) ${3}
endsnippet

snippet write "write"
write(${1:*},${2:*}) ${3}
endsnippet

snippet ik "ik"
integer(kind=${1:4}) :: ${2}
endsnippet

snippet rk "rk"
real(kind=${1:4}) :: ${2}
endsnippet

snippet zk "zk"
complex(kind=${1:4}) :: ${2}
endsnippet

snippet mod "module"
module ${1:name}
   implicit none (type, external)
   ${2}
contains
end module $1
endsnippet

snippet abs "abstract" s
abstract interface
   $0
end interface
endsnippet

snippet inter "interface" s
interface${1: name}
   $0
end interface$1
endsnippet

snippet proc "procedure" s
procedure${1/(.*)/(?1:\()/}${1:IName}${1/(.*)/(?1:\))/} :: ${2:name}${3/(.*)/(?1: => )/}${3:proc_impl}$0
endsnippet


