priority 2

snippet program "program"
program ${1:name}
	implicit none
	${2}
end program $1
endsnippet

snippet impl "implicit none"
implicit none
$0
endsnippet

snippet if "if"
if (${1:condition}) then
	${2}
end if
endsnippet

snippet sel "select case"
select case(${1:condition})
	case(${2})
		${3}
	case default
end select
endsnippet

snippet selt "select type"
select type(${1:condition})
	type is(${2})
		${3}
	class default
end select
endsnippet

snippet do "do"
do ${1:i} = ${2:1}, ${3:N}
	${4}
end do
endsnippet

snippet dow "dow"
do while (${1:condition})
	${2}
end do
endsnippet

snippet type "type"
type${2:, ${1:attributes}} :: ${3:name}
	${0}
end type $3
endsnippet

snippet open "open"
open (unit=${1:10}, file=${2:filename}, ${3})
${4}
endsnippet

snippet fun "function"
function ${1:name}(${2}) result(${3})
	${4:type} :: $3
	${6}
end function $1
endsnippet

snippet sub "sub"
subroutine ${1:name}(${2})
	${3}
end subroutine $1
endsnippet

snippet arr "arr"
${1:type}, allocatable :: ${2}
endsnippet

snippet const "const"
${1:type}, parameter :: ${3} = ${4}
endsnippet

# Variable definitions
snippet iv "integer"
integer :: ${1}
endsnippet

snippet rv "real(kind=dp)"
real(kind=dp) :: ${1}
endsnippet

#snippet rv "real(r8)"
#real(r8) :: ${1}
#endsnippet

snippet cv "complex(kind=dp)"
complex(kind=dp) :: ${1}
endsnippet

#snippet cv "complex(r8)"
#complex(r8) :: ${1}
#endsnippet

snippet lv "logical"
logical :: ${1}
endsnippet

snippet ch "character"
character :: ${1}
endsnippet

snippet str "string"
character(len=${1}) :: ${2}
endsnippet

snippet tv "type variable"
type(${1}) :: ${2}
endsnippet

snippet tp "type pointer"
type(${1}), pointer :: ${2}
endsnippet

snippet clv "class variable"
class(${1}) :: ${2}
endsnippet

# Procedure arguments
snippet iarg "integer argument"
integer, intent(${1})${2:${3:, attributes}} :: ${4}
endsnippet

snippet rarg "real(kind=dp) argument"
real(kind=dp), intent(${1})${2:${3:, attributes}} :: ${4}
endsnippet

snippet carg "complex(kind=dp) argument"
complex(kind=dp), intent(${1})${2:${3:, attributes}} :: ${4}
endsnippet

snippet larg "logical argument"
logical, intent(${1})${2:${3:, attributes}} :: ${4}
endsnippet

snippet targ "derived type argument"
type(${1}), intent(${2})${3:${4:, attributes}} :: ${5}
endsnippet

snippet clarg "class argument"
class(${1}), intent(${2})${3:${4:, attributes}} :: ${5}
endsnippet

# custom snippets
snippet print "print"
print ${1:*}, ${2}
endsnippet

snippet read "read"
read(${1:*},${2:*}) ${3}
endsnippet

snippet write "write"
write(${1:*},${2:*}) ${3}
endsnippet

snippet ik "ik"
integer(kind=${1:4}) :: ${2}
endsnippet

snippet rk "rk"
real(kind=${1:4}) :: ${2}
endsnippet

snippet ck "ck"
complex(kind=${1:4}) :: ${2}
endsnippet

snippet module "module"
module ${1:name}
	implicit none
	${2}
end module $1
endsnippet

snippet abs "abstract"
abstract $0
endsnippet

snippet inter "interface" s
interface${1: name}
	$0
end interface$1
endsnippet
